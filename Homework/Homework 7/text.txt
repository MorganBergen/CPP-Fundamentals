
Homework 7



/*

Description

Ask for a store a sentence or phrase that is typed in by the user.
Count the occurrences of every letter (do not separate upper and lowercase).
Print a table showing only the letters that appeared, sorted so that the that appeared the most frequently is at the top.
	In case of a tie, fall back to alphabetical order
Perform the sort using bubble sort
	You are required to write this function.
		The return type shall be void
		The name of the function shall be bubble_sort

Hints

When starting to test your code, don't use phrases or sentences.  Instead just type letters for which you control the counts.
Choose to work exclusively in upper-case letters.
Test with non-letter ASCII characters.
Your life may be easier by utilizing std::pair from <utility>.
Pseudo-code for the bubble-sort algorithm.

*/



Procedure bubbleSort( A : list of sortable items )
N = length(A)
repeat
	swapped = false
	for i = 1 to n - 1 inclusive do
		/* if this pair is out of order */
		if A[i-1] > A[I] then
			/* swap them and remember something changed */
			swap( A[i-1], A[i] )
			swapped = true
		end if
	end for
Until not swapped
End procedure




























Questions and Notes

What is a bubble sort?
What is std::pair from library <utility>?
This will be reviewed all in chapter 7

Programming Project

Write a program that reads in a list of integers into an array with base type int.  Provide the facility to either read this array from the keyboard or from a file, at the user's option.  If the user choose file input, the program should request a file name.  You may assume that there are fewer than 50 entries in the array.  Your program determines how many entries there are.  The output is to be a two-column list.  The first column is a list of the distinct array elements; the second column is the count of the number of occurrences of each element.  The list should be sorted on entries in the first column, largest to smallest.

For example, for the input

the output should be

n count

4 2







Hw07 Notes

string word;
getline(cin, word);
    
    for (int i = 0; i < word.size(); i++) {
        cout << int(word[i]) << " ";
    }



string number = to_string(5656);

  // int r = 5 + int(5);
  // int r = 5 + static_cast<int>(u);

REFERENCE 471


  // <cstdlib> C-string to integer Function
  int green = atoi("123");
  cout << green;
  
// atoi <- c-string to integer
// atof <- cstring to float
// atoll <- c-string to long












#include <iostream>
#include <cstdlib>
#include <sstream>
using namespace std;

int main()
{
  // TYPE CASTING
  // static_cast<type>(value) <-- change/fix to a given type
  // static_cast = magic

  int x = 4.7; // implicit conversion
  double z = x; // 4.0? yes
  int y = static_cast<int>(7.4); // explicit conversion

  x = 65;
  char xl = x;
  double d = 9.7;

  // Magic Formula <----
   cout.setf(ios::fixed);
   cout.setf(ios::showpoint);  
   cout.precision(1);

  cout << static_cast<char>(x) << endl; // old
  cout << char(x) << endl; // new
  cout << xl << endl;
  cout << z << endl;
  cout << 5.0 << endl;

  string word = "ABC";

  // Using stringstream to convert from string to int
  stringstream ss;
  for (auto e: word)
    ss << int(e);
  
  int ascii;
  ss >> ascii;
  
  cout << "String to Int & Vice Versa" << endl << "==================" << endl
       << "Word: " << word << endl
       << "ASCII: " << ascii << endl;
  
  // getline(cin, word);
    // converts string char to ASCII int values
    for (int i = 0; i < word.size(); i++) {
        cout << int(word[i]) << " ";
    }
  cout << word << endl;

  // "5656" -> 5656
  // stoi
  
  // 5656 -> "5656" (int to string)
  string number = to_string(5656);
  
  cout << "The number is " + number << endl;

  // cout << "Enter num : ";
  // int num;
  // cin >> num;
  // cout << num;

  char s = static_cast<int>(9.8);

  const char u = '5';

  int r = 5 + (u - '0');

  // char to int
  //  - '0'
  // ex. ('5' - '0') = 5
  cout << r << endl;

  // <cstdlib> C-string to integer Function
  int green = atoi("123");
  cout << green;
  
  // atoi <- c-string to integer
  // atof <- cstring to float
  // atoll <- c-string to long

  return 0;
}





#include <iostream>
#include <cstdlib>
#include <sstream>
using namespace std;

int main()
{
  // TYPE CASTING
  // static_cast<type>(value) <-- change/fix to a given type
  // static_cast = magic

  int x = 4.7; // implicit conversion
  double z = x; // 4.0? yes
  int y = static_cast<int>(7.4); // explicit conversion

  x = 65;
  char xl = x;
  double d = 9.7;

  // Magic Formula <----
   cout.setf(ios::fixed);
   cout.setf(ios::showpoint);  
   cout.precision(1);

  cout << static_cast<char>(x) << endl; // old
  cout << char(x) << endl; // new
  cout << xl << endl;
  cout << z << endl;
  cout << 5.0 << endl;

  string word = "ABC";

  // Using stringstream to convert from string to int
  stringstream ss;
  for (auto e: word)
    ss << int(e);
  
  int ascii;
  ss >> ascii;
  
  cout << "String to Int & Vice Versa" << endl << "==================" << endl
       << "Word: " << word << endl
       << "ASCII: " << ascii << endl;
  
  // getline(cin, word);
    // converts string char to ASCII int values
    for (int i = 0; i < word.size(); i++) {
        cout << int(word[i]) << " ";
    }
  cout << word << endl;

  // "5656" -> 5656
  // stoi
  
  // 5656 -> "5656" (int to string)
  string number = to_string(5656);
  
  cout << "The number is " + number << endl;

  // cout << "Enter num : ";
  // int num;
  // cin >> num;
  // cout << num;

  char s = static_cast<int>(9.8);

  const char u = '5';

  int r = 5 + (u - '0');

  // char to int
  //  - '0'
  // ex. ('5' - '0') = 5
  cout << r << endl;

  // <cstdlib> C-string to integer Function
  int green = atoi("123");
  cout << green;
  
  // atoi <- c-string to integer
  // atof <- cstring to float
  // atoll <- c-string to long

  return 0;
}











































